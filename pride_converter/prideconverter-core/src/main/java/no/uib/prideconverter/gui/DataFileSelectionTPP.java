package no.uib.prideconverter.gui;

import no.uib.prideconverter.PRIDEConverter;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Toolkit;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import no.uib.prideconverter.filefilters.MzXmlFileFilter;
import no.uib.prideconverter.filefilters.PepXmlFileFilter;
import no.uib.prideconverter.filefilters.ProtXmlFileFilter;

/**
 * This frame handles the selection of the data files to be converted for 
 * TPP data sets (Peptide-/ProteinProphet).
 * 
 * @author Harald Barsnes
 * 
 * Created November 2008
 */
public class DataFileSelectionTPP extends javax.swing.JFrame {

    private PRIDEConverter prideConverter;

    /** 
     * Opens a new DataFileSelectionTPP frame, and inserts stored information.
     * 
     * @param prideConverter
     * @param location where to position the frame
     */
    public DataFileSelectionTPP(PRIDEConverter prideConverter, Point location) {

        this.prideConverter = prideConverter;

        // sets the default wizard frame size
        this.setPreferredSize(new Dimension(prideConverter.getProperties().FRAME_WIDTH, 
                prideConverter.getProperties().FRAME_HEIGHT));
        this.setSize(prideConverter.getProperties().FRAME_WIDTH, 
                prideConverter.getProperties().FRAME_HEIGHT);
        this.setMaximumSize(new Dimension(prideConverter.getProperties().FRAME_WIDTH, 
                prideConverter.getProperties().FRAME_HEIGHT));
        this.setMinimumSize(new Dimension(prideConverter.getProperties().FRAME_WIDTH, 
                prideConverter.getProperties().FRAME_HEIGHT));

        initComponents();

        // insert stored information
        if (prideConverter.getProperties().getPeptideProphetFileName() != null) {
            peptideProphetFileJTextField.setText(prideConverter.getProperties().getPeptideProphetFileName());
        }

        if (prideConverter.getProperties().getProteinProphetFileName() != null) {
            proteinProphetFileJTextField.setText(prideConverter.getProperties().getProteinProphetFileName());
        }

        if (prideConverter.getProperties().getTppSpectrumFilesFolderName() != null) {
            spectrumFileFolderJTextField.setText(prideConverter.getProperties().getTppSpectrumFilesFolderName());
        }

        peptideProphetConfidenceLevelJSpinner.setValue(
                new Double(prideConverter.getProperties().getPeptideProphetThreshold() * 100).intValue());

        proteinProphetConfidenceLevelJSpinner.setValue(
                new Double(prideConverter.getProperties().getProteinProphetThreshold() * 100).intValue());
        
        // sets the icon of the frame
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().
                getResource("/no/uib/prideconverter/icons/prideConverter_16.GIF")));
        
        setTitle(prideConverter.getWizardName() + " " +
                prideConverter.getPrideConverterVersionNumber() + " - " + getTitle());

        if (location != null) {
            setLocation(location);
        } else {
            setLocationRelativeTo(null);
        }

        // check if the next button should be enabled or not
        mandatoryFieldsCheck();

        fileSelectionJPanel.requestFocus();
        setVisible(true);
    }

    /**
     * Checks if all mandatory information is filled in and enables or disables 
     * the Next button.
     */
    private void mandatoryFieldsCheck() {

        if (peptideProphetFileJTextField.getText().length() > 0 &&
                proteinProphetFileJTextField.getText().length() > 0 && 
                spectrumFileFolderJTextField.getText().length() > 0) {
            nextJButton.setEnabled(true);
        } else {
            nextJButton.setEnabled(false);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nextJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        cancelJButton = new javax.swing.JButton();
        fileSelectionJPanel = new javax.swing.JPanel();
        proteinProphetFileJButton = new javax.swing.JButton();
        proteinProphetFileJTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        peptideProphetFileJTextField = new javax.swing.JTextField();
        findPeptideProphetFileJButton = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        spectrumFileFolderJTextField = new javax.swing.JTextField();
        spectumFileFolderJButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        helpJButton = new javax.swing.JButton();
        aboutJButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        peptideProphetConfidenceLevelJSpinner = new javax.swing.JSpinner();
        proteinProphetConfidenceLevelJSpinner = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("File Selection - Step 1 of 8");
        setMinimumSize(new java.awt.Dimension(580, 560));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        nextJButton.setText("Next  >");
        nextJButton.setEnabled(false);
        nextJButton.setPreferredSize(new java.awt.Dimension(81, 23));
        nextJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextJButtonActionPerformed(evt);
            }
        });

        backJButton.setText("< Back");
        backJButton.setPreferredSize(new java.awt.Dimension(81, 23));
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        cancelJButton.setText("Cancel");
        cancelJButton.setPreferredSize(new java.awt.Dimension(81, 23));
        cancelJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelJButtonActionPerformed(evt);
            }
        });

        fileSelectionJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "File Selection", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 0))); // NOI18N

        proteinProphetFileJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/no/uib/prideconverter/icons/Directory.gif"))); // NOI18N
        proteinProphetFileJButton.setToolTipText("Select File");
        proteinProphetFileJButton.setBorderPainted(false);
        proteinProphetFileJButton.setContentAreaFilled(false);
        proteinProphetFileJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proteinProphetFileJButtonActionPerformed(evt);
            }
        });

        proteinProphetFileJTextField.setEditable(false);
        proteinProphetFileJTextField.setToolTipText("The prot.xml file");

        jLabel7.setText("ProteinProphet File: ");
        jLabel7.setToolTipText("The prot.xml file");

        jLabel8.setText("PeptideProphet File: ");
        jLabel8.setToolTipText("The pep.xml file");

        peptideProphetFileJTextField.setEditable(false);
        peptideProphetFileJTextField.setToolTipText("The pep.xml file");

        findPeptideProphetFileJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/no/uib/prideconverter/icons/Directory.gif"))); // NOI18N
        findPeptideProphetFileJButton.setToolTipText("Select File");
        findPeptideProphetFileJButton.setBorderPainted(false);
        findPeptideProphetFileJButton.setContentAreaFilled(false);
        findPeptideProphetFileJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findPeptideProphetFileJButtonActionPerformed(evt);
            }
        });

        jLabel10.setText("Spectrum File Folder: ");
        jLabel10.setToolTipText("The folder with the mzXML or MGF files");

        spectrumFileFolderJTextField.setEditable(false);
        spectrumFileFolderJTextField.setToolTipText("The folder with the mzXML or MGF files");

        spectumFileFolderJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/no/uib/prideconverter/icons/Directory.gif"))); // NOI18N
        spectumFileFolderJButton.setToolTipText("Select Folder");
        spectumFileFolderJButton.setBorderPainted(false);
        spectumFileFolderJButton.setContentAreaFilled(false);
        spectumFileFolderJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spectumFileFolderJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout fileSelectionJPanelLayout = new javax.swing.GroupLayout(fileSelectionJPanel);
        fileSelectionJPanel.setLayout(fileSelectionJPanelLayout);
        fileSelectionJPanelLayout.setHorizontalGroup(
            fileSelectionJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileSelectionJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fileSelectionJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel10)
                    .addComponent(jLabel8))
                .addGap(32, 32, 32)
                .addGroup(fileSelectionJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fileSelectionJPanelLayout.createSequentialGroup()
                        .addComponent(peptideProphetFileJTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(findPeptideProphetFileJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(fileSelectionJPanelLayout.createSequentialGroup()
                        .addComponent(spectrumFileFolderJTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spectumFileFolderJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(fileSelectionJPanelLayout.createSequentialGroup()
                        .addComponent(proteinProphetFileJTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(proteinProphetFileJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        fileSelectionJPanelLayout.setVerticalGroup(
            fileSelectionJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileSelectionJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fileSelectionJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fileSelectionJPanelLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(fileSelectionJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(peptideProphetFileJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(findPeptideProphetFileJButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(fileSelectionJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fileSelectionJPanelLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(fileSelectionJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(proteinProphetFileJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(proteinProphetFileJButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(fileSelectionJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fileSelectionJPanelLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(fileSelectionJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(spectrumFileFolderJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(spectumFileFolderJButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jLabel3.setFont(new java.awt.Font("Tahoma", 2, 11));
        jLabel3.setText("Select the files you want to convert data from, and click on 'Next'  to continue.");

        helpJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/no/uib/prideconverter/icons/help.GIF"))); // NOI18N
        helpJButton.setToolTipText("Help");
        helpJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpJButtonActionPerformed(evt);
            }
        });

        aboutJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/no/uib/prideconverter/icons/prideConverter_16.GIF"))); // NOI18N
        aboutJButton.setToolTipText("About");
        aboutJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutJButtonActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Selection Thresholds", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 0))); // NOI18N

        jLabel1.setText("PeptideProphet Threshold:");
        jLabel1.setToolTipText("Probability threshold for acceptance of a peptide identification");

        peptideProphetConfidenceLevelJSpinner.setModel(new javax.swing.SpinnerNumberModel(90, 0, 100, 1));
        peptideProphetConfidenceLevelJSpinner.setToolTipText("Probability threshold for acceptance of a peptide identification");

        proteinProphetConfidenceLevelJSpinner.setModel(new javax.swing.SpinnerNumberModel(90, 0, 100, 1));
        proteinProphetConfidenceLevelJSpinner.setToolTipText("Probability threshold for acceptance of a protein identification");

        jLabel2.setText("ProteinProphet Threshold:");
        jLabel2.setToolTipText("Probability threshold for acceptance of a protein identification");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(37, 37, 37)
                        .addComponent(peptideProphetConfidenceLevelJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(proteinProphetConfidenceLevelJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(315, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(peptideProphetConfidenceLevelJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(proteinProphetConfidenceLevelJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fileSelectionJPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(helpJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(aboutJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 239, Short.MAX_VALUE)
                        .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nextJButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cancelJButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fileSelectionJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 163, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cancelJButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nextJButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(helpJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(aboutJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Closes the frame and the wizard.
     * 
     * @param evt
     */
    private void cancelJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelJButtonActionPerformed
        this.setVisible(false);
        this.dispose();
        prideConverter.cancelConvertion();
    }//GEN-LAST:event_cancelJButtonActionPerformed

    /**
     * Closes the frame and opens the next frame (SpectraSelection).
     * 
     * @param evt
     */
    private void nextJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextJButtonActionPerformed

        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));

        boolean saveOk = true;

        try {
            prideConverter.getProperties().setPeptideProphetThreshold(
                    new Double((Integer) peptideProphetConfidenceLevelJSpinner.getValue()) / 100);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "The PeptideProphet threshold is not a number!");
            peptideProphetConfidenceLevelJSpinner.requestFocus();
            saveOk = false;
        }

        try {
            prideConverter.getProperties().setProteinProphetThreshold(
                    new Double((Integer) proteinProphetConfidenceLevelJSpinner.getValue()) / 100);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "The ProteinProphet threshold is not a number!");
            proteinProphetConfidenceLevelJSpinner.requestFocus();
            saveOk = false;
        }

        if (saveOk) {
            //new SpectraSelectionWithIdentifications(prideConverter, this.getLocation());
            new SpectraSelectionNoIdentifications(prideConverter, this.getLocation());

            this.setVisible(false);
            this.dispose();
        }

        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_nextJButtonActionPerformed

    /**
     * See cancelJButtonActionPerformed
     * 
     * @param evt
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        cancelJButtonActionPerformed(null);
    }//GEN-LAST:event_formWindowClosing

    /**
     * Opens a Help dialog.
     * 
     * @param evt
     */
    private void helpJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpJButtonActionPerformed
        setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        new HelpWindow(this, getClass().getResource("/no/uib/prideconverter/helpfiles/DataFileSelectionTPP.html"));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
}//GEN-LAST:event_helpJButtonActionPerformed

    /**
     * Opens an About PRIDE Converter dialog.
     * 
     * @param evt
     */
    private void aboutJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutJButtonActionPerformed
        setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        new HelpWindow(this, getClass().getResource("/no/uib/prideconverter/helpfiles/AboutPRIDE_Converter.html"));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_aboutJButtonActionPerformed

    /**
     * Closes the frame and opens the previous frame (DataSourceSelection).
     * 
     * @param evt
     */
    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));

        boolean saveOk = true;

        try {
            prideConverter.getProperties().setPeptideProphetThreshold(
                    new Double((Integer) peptideProphetConfidenceLevelJSpinner.getValue()) / 100);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "The PeptideProphet threshold is not a number!");
            peptideProphetConfidenceLevelJSpinner.requestFocus();
            saveOk = false;
        }

        try {
            prideConverter.getProperties().setProteinProphetThreshold(
                    new Double((Integer) proteinProphetConfidenceLevelJSpinner.getValue()) / 100);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "The ProteinProphet threshold is not a number!");
            proteinProphetConfidenceLevelJSpinner.requestFocus();
            saveOk = false;
        }

        if (saveOk) {

            new DataSourceSelection(prideConverter, this.getLocation());
            this.setVisible(false);
            this.dispose();
        }

        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_backJButtonActionPerformed

    /**
     * Opens a filechooser where the ProteinProphet file can be selected.
     * 
     * @param evt
     */
    private void proteinProphetFileJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proteinProphetFileJButtonActionPerformed
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));

        JFileChooser chooser = new JFileChooser(prideConverter.getUserProperties().getCurrentSourceFileLocation());

        if (proteinProphetFileJTextField.getText().length() > 0) {
            chooser.setSelectedFile(new File(proteinProphetFileJTextField.getText()));
        }

        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setDialogTitle("Select The ProteinProphet File");
        chooser.setFileFilter(new ProtXmlFileFilter());

        String path;

        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            path = (chooser.getSelectedFile().getAbsoluteFile().getPath());
            proteinProphetFileJTextField.setText(path);
            prideConverter.getUserProperties().setSourceFileLocation(chooser.getSelectedFile().getPath());
            prideConverter.getProperties().setProteinProphetFileName(path);

            prideConverter.getProperties().setSpectrumTableModel(null);
            prideConverter.getProperties().setInstrumentDetailsExtracted(false);
            prideConverter.getProperties().setSelectedSourceFiles(new ArrayList());
            prideConverter.getProperties().setSpectraSelectionCriteria(null);
            prideConverter.getProperties().setDataFileHasBeenLoaded(false);
            prideConverter.getProperties().setSampleDetailsExtracted(false);
            prideConverter.getProperties().setContactInfoExtracted(false);
        }

        mandatoryFieldsCheck();

        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
}//GEN-LAST:event_proteinProphetFileJButtonActionPerformed

    /**
     * Opens a filechooser where the PeptideProphet file can be selected.
     * 
     * @param evt
     */
    private void findPeptideProphetFileJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findPeptideProphetFileJButtonActionPerformed
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));

        JFileChooser chooser = new JFileChooser(prideConverter.getUserProperties().getCurrentSourceFileLocation());

        if (peptideProphetFileJTextField.getText().length() > 0) {
            chooser.setSelectedFile(new File(peptideProphetFileJTextField.getText()));
        }

        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setDialogTitle("Select The PeptideProphet File");
        chooser.setFileFilter(new PepXmlFileFilter());

        String path;

        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            path = (chooser.getSelectedFile().getAbsoluteFile().getPath());
            peptideProphetFileJTextField.setText(path);
            prideConverter.getUserProperties().setSourceFileLocation(chooser.getSelectedFile().getPath());
            prideConverter.getProperties().setPeptideProphetFileName(path);

            prideConverter.getProperties().setSpectrumTableModel(null);
            prideConverter.getProperties().setInstrumentDetailsExtracted(false);
            prideConverter.getProperties().setSelectedSourceFiles(new ArrayList());
            prideConverter.getProperties().setSpectraSelectionCriteria(null);
            prideConverter.getProperties().setDataFileHasBeenLoaded(false);
            prideConverter.getProperties().setSampleDetailsExtracted(false);
            prideConverter.getProperties().setContactInfoExtracted(false);
        }

        mandatoryFieldsCheck();

        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
}//GEN-LAST:event_findPeptideProphetFileJButtonActionPerformed

    /**
     * Opens a filechooser where the mzXML files folder can be selected.
     * 
     * @param evt
     */
    private void spectumFileFolderJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spectumFileFolderJButtonActionPerformed
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));

        JFileChooser chooser = new JFileChooser(
                prideConverter.getUserProperties().getCurrentSourceFileLocation());

        if (spectrumFileFolderJTextField.getText().length() > 0) {
            chooser.setSelectedFile(new File(spectrumFileFolderJTextField.getText()));
        }

        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setDialogTitle("Select The Spectrum Files Folder");

        String path;

        int returnVal = chooser.showOpenDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            path = (chooser.getSelectedFile().getAbsoluteFile().getPath());
            spectrumFileFolderJTextField.setText(path);
            prideConverter.getUserProperties().setSourceFileLocation(chooser.getSelectedFile().getPath());
            prideConverter.getProperties().setTppSpectrumFilesFolderName(path);

            prideConverter.getProperties().setSpectrumTableModel(null);
            prideConverter.getProperties().setInstrumentDetailsExtracted(false);
            prideConverter.getProperties().setSelectedSourceFiles(new ArrayList());
            prideConverter.getProperties().setSpectraSelectionCriteria(null);
            prideConverter.getProperties().setDataFileHasBeenLoaded(false);
            prideConverter.getProperties().setSampleDetailsExtracted(false);
            prideConverter.getProperties().setContactInfoExtracted(false);
        }

        mandatoryFieldsCheck();

        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
}//GEN-LAST:event_spectumFileFolderJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aboutJButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton cancelJButton;
    private javax.swing.JPanel fileSelectionJPanel;
    private javax.swing.JButton findPeptideProphetFileJButton;
    private javax.swing.JButton helpJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton nextJButton;
    private javax.swing.JSpinner peptideProphetConfidenceLevelJSpinner;
    private javax.swing.JTextField peptideProphetFileJTextField;
    private javax.swing.JSpinner proteinProphetConfidenceLevelJSpinner;
    private javax.swing.JButton proteinProphetFileJButton;
    private javax.swing.JTextField proteinProphetFileJTextField;
    private javax.swing.JTextField spectrumFileFolderJTextField;
    private javax.swing.JButton spectumFileFolderJButton;
    // End of variables declaration//GEN-END:variables
}
